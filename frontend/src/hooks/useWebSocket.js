// hooks/useWebSocket.js
import { useEffect, useRef } from 'react'
import { useDispatch } from 'react-redux'
import { addMessage } from '../store/messagesSlice'
import { addChannelFromServer, removeChannelFromServer, updateChannelFromServer } from '../store/channelsSlice'
import socketService from '../services/socket'

export const useWebSocket = () => {
  const dispatch = useDispatch()
  const eventHandlers = useRef(new Set())

  useEffect(() => {
    let mounted = true
    let socketInstance = null

    console.log('üîå useWebSocket: Initializing WebSocket connection')

    const initializeSocket = async () => {
      try {
        console.log('üîÑ useWebSocket: Waiting for connection...')
        socketInstance = await socketService.waitForConnection()

        if (!mounted) {
          console.log('üö´ useWebSocket: Component unmounted during connection')
          return
        }

        console.log('‚úÖ useWebSocket: Connection established', {
          socketId: socketInstance.id,
          connected: socketInstance.connected,
        })

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const handleNewMessage = message => {
          if (!mounted) {
            console.log('üö´ useWebSocket: Component unmounted, ignoring message')
            return
          }

          console.log('üì® useWebSocket: Received newMessage event:', message)
          dispatch(addMessage(message))
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        const handleNewChannel = channel => {
          if (!mounted) return
          console.log('üì® useWebSocket: Received newChannel event:', channel)
          dispatch(addChannelFromServer(channel))
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        const handleRemoveChannel = ({ id }) => {
          if (!mounted) return
          console.log('üì® useWebSocket: Received removeChannel event:', id)
          dispatch(removeChannelFromServer({ id }))
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        const handleRenameChannel = channel => {
          if (!mounted) return
          console.log('üì® useWebSocket: Received renameChannel event:', channel)
          dispatch(updateChannelFromServer(channel))
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        socketInstance.on('newMessage', handleNewMessage)
        socketInstance.on('newChannel', handleNewChannel)
        socketInstance.on('removeChannel', handleRemoveChannel)
        socketInstance.on('renameChannel', handleRenameChannel)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        eventHandlers.current.add(handleNewMessage)
        eventHandlers.current.add(handleNewChannel)
        eventHandlers.current.add(handleRemoveChannel)
        eventHandlers.current.add(handleRenameChannel)

        console.log('üëÇ useWebSocket: Subscribed to all events')
      }
      catch (error) {
        console.error('üí• useWebSocket: Failed to initialize WebSocket:', error)
      }
    }

    initializeSocket()

    return () => {
      console.log('üßπ useWebSocket: Cleaning up')
      mounted = false

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
      if (socketInstance) {
        eventHandlers.current.forEach(handler => {
          socketInstance.off('newMessage', handler)
          socketInstance.off('newChannel', handler)
          socketInstance.off('removeChannel', handler)
          socketInstance.off('renameChannel', handler)
        })
        eventHandlers.current.clear()
        console.log('üîå useWebSocket: Unsubscribed from all events')
      }
    }
  }, [dispatch]) // –£–ë–ò–†–ê–ï–ú channels, messages –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
}
