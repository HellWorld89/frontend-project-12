import { useEffect, useState } from 'react';
import { Alert } from 'react-bootstrap';
import socketService from '../services/socket';

const ConnectionStatus = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isSocketConnected, setIsSocketConnected] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertVariant, setAlertVariant] = useState('warning');

  useEffect(() => {
    let socket;
    let reconnectTimer;

    const updateAlert = (message, variant, show = true) => {
      setAlertMessage(message);
      setAlertVariant(variant);
      setShowAlert(show);
    };

    const handleOnline = () => {
      console.log('Browser is online');
      setIsOnline(true);
      updateAlert('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success', true);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowAlert(false);
      }, 3000);
    };

    const handleOffline = () => {
      console.log('Browser is offline');
      setIsOnline(false);
      updateAlert('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'danger', true);
    };

    const initializeSocket = () => {
      try {
        socket = socketService.getSocket();

        if (!socket) {
          socket = socketService.connect();
        }

        const handleConnect = () => {
          console.log('Socket connected');
          setIsSocketConnected(true);
          updateAlert('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success', true);

          setTimeout(() => {
            setShowAlert(false);
          }, 3000);
        };

        const handleDisconnect = (reason) => {
          console.log('Socket disconnected:', reason);
          setIsSocketConnected(false);

          if (reason === 'io server disconnect') {
            // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            reconnectTimer = setTimeout(() => {
              socketService.connect();
            }, 2000);
          }

          updateAlert('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞—Ä—É—à–µ–Ω–æ', 'warning', true);
        };

        const handleConnectError = (error) => {
          console.error('Socket connection error:', error);
          setIsSocketConnected(false);
          updateAlert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'danger', true);
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setIsSocketConnected(socket.connected);

        if (socket.connected) {
          updateAlert('', 'success', false);
        } else {
          updateAlert('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info', true);
        }

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è WebSocket
        socket.on('connect', handleConnect);
        socket.on('disconnect', handleDisconnect);
        socket.on('connect_error', handleConnectError);

        return () => {
          if (socket) {
            socket.off('connect', handleConnect);
            socket.off('disconnect', handleDisconnect);
            socket.off('connect_error', handleConnectError);
          }
          if (reconnectTimer) {
            clearTimeout(reconnectTimer);
          }
        };
      } catch (error) {
        console.error('Error initializing socket:', error);
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç
    const cleanupSocket = initializeSocket();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      if (cleanupSocket) cleanupSocket();
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      if (reconnectTimer) {
        clearTimeout(reconnectTimer);
      }
    };
  }, []);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
  if (!showAlert || (isOnline && isSocketConnected && !alertMessage.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))) {
    return null;
  }

  return (
    <Alert
      variant={alertVariant}
      className="m-0 rounded-0 text-center py-2"
    >
      {alertMessage}
    </Alert>
  );
};

export default ConnectionStatus;